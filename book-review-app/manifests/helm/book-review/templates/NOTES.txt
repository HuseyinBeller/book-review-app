1. Get the application URL by running these commands:

{{- if .Values.frontend.enabled }}
{{- if eq .Values.frontend.service.type "NodePort" }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "book-review.fullname" . }}-frontend)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if eq .Values.frontend.service.type "LoadBalancer" }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "book-review.fullname" . }}-frontend'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "book-review.fullname" . }}-frontend --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.frontend.service.port }}
{{- else if eq .Values.frontend.service.type "ClusterIP" }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "book-review.frontend.selectorLabels" . | replace ": " "=" | replace "\n" "," }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}
{{- end }}

2. Application Components:
{{- if .Values.frontend.enabled }}
   - Frontend: React application running on port {{ .Values.frontend.service.port }}
{{- end }}
{{- if .Values.backend.enabled }}
   - Backend: Express.js API running on port {{ .Values.backend.service.port }}
{{- end }}
{{- if .Values.mongodb.enabled }}
   - Database: MongoDB running on port {{ .Values.mongodb.service.port }}
{{- end }}

3. To check the status of your deployment:
   kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

4. To view logs:
{{- if .Values.frontend.enabled }}
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=frontend
{{- end }}
{{- if .Values.backend.enabled }}
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=backend
{{- end }}
{{- if .Values.mongodb.enabled }}
   kubectl logs -n {{ .Release.Namespace }} -l app.kubernetes.io/component=mongodb
{{- end }}

{{- if .Values.mongodb.enabled }}
{{- if .Values.mongodb.persistence.enabled }}

5. MongoDB Persistence:
   Data is persisted using a {{ .Values.mongodb.persistence.size }} PVC.
{{- else }}

5. MongoDB Storage:
   WARNING: Data is stored in an emptyDir volume and will be lost if the pod is deleted.
   To enable persistence, set mongodb.persistence.enabled=true
{{- end }}
{{- end }}

6. To upgrade this release:
   helm upgrade {{ .Release.Name }} ./book-review --namespace {{ .Release.Namespace }}

7. To uninstall this release:
   helm uninstall {{ .Release.Name }} --namespace {{ .Release.Namespace }} 