{{- if .Values.frontend.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "book-review.fullname" . }}-frontend-nginx-config
  labels:
    {{- include "book-review.labels" . | nindent 4 }}
    app.kubernetes.io/component: frontend
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html index.htm;

        # Serve runtime configuration
        location /config.json {
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
            return 200 '{"apiBaseUrl": "/api"}';
        }

        # Serve configuration script
        location /config.js {
            add_header Content-Type application/javascript;
            add_header Access-Control-Allow-Origin *;
            return 200 '
                (function() {
                    // Set runtime configuration
                    window.REACT_APP_API_BASE_URL = "/api";
                    
                    // Override fetch to intercept localhost API calls
                    const originalFetch = window.fetch;
                    window.fetch = function(url, options) {
                        if (typeof url === "string") {
                            if (url.startsWith("http://localhost:3000/api")) {
                                url = url.replace("http://localhost:3000/api", "/api");
                            } else if (url.startsWith("localhost:3000/api")) {
                                url = url.replace("localhost:3000/api", "/api");
                            }
                        }
                        return originalFetch.call(this, url, options);
                    };
                    
                    // Override XMLHttpRequest for axios compatibility
                    const originalXHROpen = XMLHttpRequest.prototype.open;
                    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
                        if (typeof url === "string") {
                            if (url.startsWith("http://localhost:3000/api")) {
                                url = url.replace("http://localhost:3000/api", "/api");
                            } else if (url.startsWith("localhost:3000/api")) {
                                url = url.replace("localhost:3000/api", "/api");
                            }
                        }
                        return originalXHROpen.call(this, method, url, async, user, password);
                    };
                    
                    console.log("API configuration loaded: API calls will be proxied to /api");
                })();
            ';
        }

        # Serve custom index.html with config script
        location = / {
            return 200 '<!doctype html><html lang="en"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Book Review App</title><script src="/config.js"></script><script defer="defer" src="/static/js/main.219b0101.js"></script></head><body><div id="root"></div></body></html>';
            add_header Content-Type text/html;
        }

        # Serve static files
        location / {
            try_files $uri $uri/ =404;
        }

        # Proxy API calls to backend service
        location /api/ {
            proxy_pass http://{{ include "book-review.fullname" . }}-backend:3000/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
{{- end }} 